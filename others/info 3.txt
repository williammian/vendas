Java 11

-------------------------

Spring Tool Suite (STS)

https://spring.io/tools

-------------------------

Spring Initializr

https://start.spring.io/

---------------------------

https://www.postgresql.org/download/

----------------------------

https://docs.spring.io/spring-boot/index.html

-------------------------

Acessar o pgadmin via docker-compose

localhost:15433

------------------------

Acessar o banco de dados via docker-compose

Ao adicionar o servidor no pgAdmin, use as seguintes configurações:

Host: db (que é o nome do serviço no docker-compose)
Porta: 5432 (mesmo que o host esteja acessando via 5433, dentro da rede Docker o PostgreSQL ainda escuta na porta padrão 5432)
Usuário: postgres
Senha: postgres
Database: vendas

-------------------------

Se estiver tentando conectar fora do Docker (por exemplo, com um cliente local), use:

Host: localhost
Porta: 5433
Usuário: postgres
Senha: postgres
Database: vendas

-------------------------

localhost:8080/api/clientes?nome=&cpf=

localhost:8080/api/clientes?page=0&size=2

@GetMapping
public Page<ClienteFormRequest> getLista( 
	@RequestParam(value = "nome", required = false, defaultValue = "") String nome,
	@RequestParam(value = "cpf", required = false, defaultValue = "") String cpf,
	Pageable pageable //page , size
){
	return repository
			.buscarPorNomeCpf("%" + nome + "%", "%" + cpf+ "%", pageable)
			.map( ClienteFormRequest::fromModel );

}
	
/* retorno
{
	"content": [
		{
			"id": 1,
			"nome": "Fulando da Silva",
			"cpf": "123.456.789-33",
			"dataNascimento": "15/01/2000",
			"endereco": "Rua Geralda, 500",
			"email": "fulano@email.com",
			"telefone": "(11)96325-8744",
			"cadastro": "28/02/2025"
		}
	],
	"pageable": {
		"sort": {
			"sorted": false,
			"unsorted": true,
			"empty": true
		},
		"offset": 0,
		"pageSize": 20,
		"pageNumber": 0,
		"paged": true,
		"unpaged": false
	},
	"last": true,
	"totalPages": 1,
	"totalElements": 1,
	"size": 20,
	"number": 0,
	"sort": {
		"sorted": false,
		"unsorted": true,
		"empty": true
	},
	"first": true,
	"numberOfElements": 1,
	"empty": false
}
*/
	
/*
@GetMapping
public List<ClienteFormRequest> getLista(){
	return repository
				.findAll()
				.stream()
				.map( ClienteFormRequest::fromModel )
				.collect(Collectors.toList());
}
*/

-----------------------------------

JaspersoftStudio 6.2.3

https://community.jaspersoft.com/download-jaspersoft/community-edition/

https://sourceforge.net/projects/jasperreports/files/archive/jasperreports/

https://jaspersoft-studio.softonic.com.br/?utm_source=chatgpt.com

https://www.filehorse.com/download-jaspersoft-studio/download/#google_vignette

-----------------------------------

Select base do relatório

select 
	v.id as codigo, 
	c.nome as nomeCliente,
	v.total as total,
	v.forma_pagamento
from venda as v
join cliente as c on c.id = v.id_cliente

-----------------------------------

Build

Botão direito na aplicação > Run As > Maven Clean

mvn clean

Botão direito na aplicação > Run As > Maven Install

mvn install -DskipTests

Arquivo jar na pasta target/vendas-api-0.0.1-SNAPSHOT.jar

Nome gerado com artifactId concatenado com version
Para alterar, ir no pom.xml, em build, adicionar a tag <finalName>${project.artifactId}</finalName>

-----------------------------------

Rodando jar

linha de comando até a pasta em que está o jar (/target)

sem perfil
java -jar vendas-api.jar 

com perfil
java -jar -Dspring.profiles.active=prod vendas-api.jar

java -jar -Dspring.profiles.active=hom vendas-api.jar

------------------------------------

Maven

maven.apache.org

Download

Binary zip archive

Descompactar na máquina

Configurar a variável de ambiente para a pasta do maven (raiz em que está a pasta bin)
M2_HOME
pasta do maven

Adicionar na variável Path
Editar
Novo
%M2_HOME%\bin

Testando no console
digite
mvn -v

------------------------------------

Heroku

Na raiz do projeto criar o arquivo Procfile

web: java -Dserver.port=$PORT -Dspring.profiles.active=prod -jar target/vendas-api.jar

Na raiz do projeto criar o arquivo system.properties

java.runtime.version=11

-------------------------------------

